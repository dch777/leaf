!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/a3c87ab5/
ASTNode	/home/dchanana/Projects/leaf/src/AST.h	/^class ASTNode$/;"	c
ASTNode::addChild	/home/dchanana/Projects/leaf/src/AST.h	/^		void addChild(std::unique_ptr<ASTNode> child) {children.push_back(child);}$/;"	f	class:ASTNode	typeref:typename:void	access:public	signature:(std::unique_ptr<ASTNode> child)
ASTNode::children	/home/dchanana/Projects/leaf/src/AST.h	/^		std::vector<std::unique_ptr<ASTNode>> children;$/;"	m	class:ASTNode	typeref:typename:std::vector<std::unique_ptr<ASTNode>>	access:protected
ASTNode::~ASTNode	/home/dchanana/Projects/leaf/src/AST.h	/^		virtual ~ASTNode() {}$/;"	f	class:ASTNode	access:public	signature:()
ExprASTNode	/home/dchanana/Projects/leaf/src/AST.h	/^class ExprASTNode : public ASTNode$/;"	c	inherits:ASTNode
ExprASTNode::~ExprASTNode	/home/dchanana/Projects/leaf/src/AST.h	/^		virtual ~ExprASTNode() {}$/;"	f	class:ExprASTNode	access:public	signature:()
Lexer	/home/dchanana/Projects/leaf/src/lexer.h	/^		Lexer(std::string file) : file(file) {}$/;"	f	class:Lexer	access:public	signature:(std::string file)
Lexer	/home/dchanana/Projects/leaf/src/lexer.h	/^class Lexer$/;"	c
Lexer::Lexer	/home/dchanana/Projects/leaf/src/lexer.h	/^		Lexer(std::string file) : file(file) {}$/;"	f	class:Lexer	access:public	signature:(std::string file)
Lexer::TokenList	/home/dchanana/Projects/leaf/src/lexer.h	/^		std::vector<Token> TokenList;$/;"	m	class:Lexer	typeref:typename:std::vector<Token>	access:public
Lexer::constructAST	/home/dchanana/Projects/leaf/src/lexer.cpp	/^void Lexer::constructAST()$/;"	f	class:Lexer	typeref:typename:void	signature:()
Lexer::constructAST	/home/dchanana/Projects/leaf/src/lexer.h	/^		void constructAST();$/;"	p	class:Lexer	typeref:typename:void	access:public	signature:()
Lexer::createToken	/home/dchanana/Projects/leaf/src/lexer.cpp	/^void Lexer::createToken(TokenType type, std::string data, size_t line, size_t pos)$/;"	f	class:Lexer	typeref:typename:void	signature:(TokenType type,std::string data,size_t line,size_t pos)
Lexer::createToken	/home/dchanana/Projects/leaf/src/lexer.h	/^		void createToken(TokenType type, std::string data, size_t line, size_t pos);$/;"	p	class:Lexer	typeref:typename:void	access:public	signature:(TokenType type,std::string data,size_t line,size_t pos)
Lexer::file	/home/dchanana/Projects/leaf/src/lexer.h	/^		std::ifstream file;$/;"	m	class:Lexer	typeref:typename:std::ifstream	access:public
Lexer::logCompileError	/home/dchanana/Projects/leaf/src/lexer.cpp	/^void Lexer::logCompileError(Token token)$/;"	f	class:Lexer	typeref:typename:void	signature:(Token token)
Lexer::logCompileError	/home/dchanana/Projects/leaf/src/lexer.h	/^		void logCompileError(Token token);$/;"	p	class:Lexer	typeref:typename:void	access:public	signature:(Token token)
Lexer::root	/home/dchanana/Projects/leaf/src/lexer.h	/^		ASTNode root;$/;"	m	class:Lexer	typeref:typename:ASTNode	access:public
Lexer::tokenize	/home/dchanana/Projects/leaf/src/lexer.cpp	/^void Lexer::tokenize()$/;"	f	class:Lexer	typeref:typename:void	signature:()
Lexer::tokenize	/home/dchanana/Projects/leaf/src/lexer.h	/^		void tokenize();$/;"	p	class:Lexer	typeref:typename:void	access:public	signature:()
Lexer::tokenize	/home/dchanana/Projects/leaf/src/tokenizer.cpp	/^void Lexer::tokenize(std::string input[])$/;"	f	class:Lexer	typeref:typename:void	signature:(std::string input[])
NumberExprASTNode	/home/dchanana/Projects/leaf/src/AST.h	/^		NumberExprASTNode(double value) : value(value) {}$/;"	f	class:NumberExprASTNode	access:public	signature:(double value)
NumberExprASTNode	/home/dchanana/Projects/leaf/src/AST.h	/^class NumberExprASTNode : public ExprASTNode$/;"	c	inherits:ExprASTNode
NumberExprASTNode::NumberExprASTNode	/home/dchanana/Projects/leaf/src/AST.h	/^		NumberExprASTNode(double value) : value(value) {}$/;"	f	class:NumberExprASTNode	access:public	signature:(double value)
NumberExprASTNode::value	/home/dchanana/Projects/leaf/src/AST.h	/^		double value;$/;"	m	class:NumberExprASTNode	typeref:typename:double	access:private
TokenList	/home/dchanana/Projects/leaf/src/lexer.h	/^		std::vector<Token> TokenList;$/;"	m	class:Lexer	typeref:typename:std::vector<Token>	access:public
VariableExprASTNode	/home/dchanana/Projects/leaf/src/AST.h	/^		VariableExprASTNode(std::string name, ExprASTNode value) : name(name) {children.push_back(&val/;"	f	class:VariableExprASTNode	access:public	signature:(std::string name,ExprASTNode value)
VariableExprASTNode	/home/dchanana/Projects/leaf/src/AST.h	/^class VariableExprASTNode : public ExprASTNode$/;"	c	inherits:ExprASTNode
VariableExprASTNode::VariableExprASTNode	/home/dchanana/Projects/leaf/src/AST.h	/^		VariableExprASTNode(std::string name, ExprASTNode value) : name(name) {children.push_back(&val/;"	f	class:VariableExprASTNode	access:public	signature:(std::string name,ExprASTNode value)
VariableExprASTNode::name	/home/dchanana/Projects/leaf/src/AST.h	/^		std::string name;$/;"	m	class:VariableExprASTNode	typeref:typename:std::string	access:private
addChild	/home/dchanana/Projects/leaf/src/AST.h	/^		void addChild(std::unique_ptr<ASTNode> child) {children.push_back(child);}$/;"	f	class:ASTNode	typeref:typename:void	access:public	signature:(std::unique_ptr<ASTNode> child)
children	/home/dchanana/Projects/leaf/src/AST.h	/^		std::vector<std::unique_ptr<ASTNode>> children;$/;"	m	class:ASTNode	typeref:typename:std::vector<std::unique_ptr<ASTNode>>	access:protected
constructAST	/home/dchanana/Projects/leaf/src/lexer.cpp	/^void Lexer::constructAST()$/;"	f	class:Lexer	typeref:typename:void	signature:()
constructAST	/home/dchanana/Projects/leaf/src/lexer.h	/^		void constructAST();$/;"	p	class:Lexer	typeref:typename:void	access:public	signature:()
createToken	/home/dchanana/Projects/leaf/src/lexer.cpp	/^void Lexer::createToken(TokenType type, std::string data, size_t line, size_t pos)$/;"	f	class:Lexer	typeref:typename:void	signature:(TokenType type,std::string data,size_t line,size_t pos)
createToken	/home/dchanana/Projects/leaf/src/lexer.h	/^		void createToken(TokenType type, std::string data, size_t line, size_t pos);$/;"	p	class:Lexer	typeref:typename:void	access:public	signature:(TokenType type,std::string data,size_t line,size_t pos)
createToken	/home/dchanana/Projects/leaf/src/tokenizer.cpp	/^Token createToken(TokenType type, std::string data)$/;"	f	typeref:typename:Token	signature:(TokenType type,std::string data)
file	/home/dchanana/Projects/leaf/src/lexer.h	/^		std::ifstream file;$/;"	m	class:Lexer	typeref:typename:std::ifstream	access:public
logCompileError	/home/dchanana/Projects/leaf/src/lexer.cpp	/^void Lexer::logCompileError(Token token)$/;"	f	class:Lexer	typeref:typename:void	signature:(Token token)
logCompileError	/home/dchanana/Projects/leaf/src/lexer.h	/^		void logCompileError(Token token);$/;"	p	class:Lexer	typeref:typename:void	access:public	signature:(Token token)
main	/home/dchanana/Projects/leaf/src/lexer.cpp	/^int main(int argc, char *argv[])$/;"	f	typeref:typename:int	signature:(int argc,char * argv[])
main	/home/dchanana/Projects/leaf/src/tokenizer.cpp	/^int main(int argc, char *argv[])$/;"	f	typeref:typename:int	signature:(int argc,char * argv[])
name	/home/dchanana/Projects/leaf/src/AST.h	/^		std::string name;$/;"	m	class:VariableExprASTNode	typeref:typename:std::string	access:private
root	/home/dchanana/Projects/leaf/src/lexer.h	/^		ASTNode root;$/;"	m	class:Lexer	typeref:typename:ASTNode	access:public
tokenize	/home/dchanana/Projects/leaf/src/lexer.cpp	/^void Lexer::tokenize()$/;"	f	class:Lexer	typeref:typename:void	signature:()
tokenize	/home/dchanana/Projects/leaf/src/lexer.h	/^		void tokenize();$/;"	p	class:Lexer	typeref:typename:void	access:public	signature:()
tokenize	/home/dchanana/Projects/leaf/src/tokenizer.cpp	/^void Lexer::tokenize(std::string input[])$/;"	f	class:Lexer	typeref:typename:void	signature:(std::string input[])
value	/home/dchanana/Projects/leaf/src/AST.h	/^		double value;$/;"	m	class:NumberExprASTNode	typeref:typename:double	access:private
~ASTNode	/home/dchanana/Projects/leaf/src/AST.h	/^		virtual ~ASTNode() {}$/;"	f	class:ASTNode	access:public	signature:()
~ExprASTNode	/home/dchanana/Projects/leaf/src/AST.h	/^		virtual ~ExprASTNode() {}$/;"	f	class:ExprASTNode	access:public	signature:()
