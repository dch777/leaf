!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/a3c87ab5/
ASTNode	/home/dchanana/Projects/leaf/src/AST.h	/^class ASTNode$/;"	c
ASTNode::addChild	/home/dchanana/Projects/leaf/src/AST.h	/^		void addChild(NodePtr child) {children.push_back(std::move(child));}$/;"	f	class:ASTNode	typeref:typename:void	access:public	signature:(NodePtr child)
ASTNode::children	/home/dchanana/Projects/leaf/src/AST.h	/^		std::vector<NodePtr> children;$/;"	m	class:ASTNode	typeref:typename:std::vector<NodePtr>	access:protected
ASTNode::getChildren	/home/dchanana/Projects/leaf/src/AST.h	/^		std::vector<NodePtr> getChildren() {return children;}$/;"	f	class:ASTNode	typeref:typename:std::vector<NodePtr>	access:public	signature:()
ASTNode::setChildren	/home/dchanana/Projects/leaf/src/AST.h	/^		void setChildren(std::vector<NodePtr> newChildren) {children = std::move(newChildren);}$/;"	f	class:ASTNode	typeref:typename:void	access:public	signature:(std::vector<NodePtr> newChildren)
ASTNode::~ASTNode	/home/dchanana/Projects/leaf/src/AST.h	/^		virtual ~ASTNode() {}$/;"	f	class:ASTNode	access:public	signature:()
CallExprASTNode	/home/dchanana/Projects/leaf/src/AST.h	/^		CallExprASTNode(std::string name, std::vector<NodePtr> args) : name(name) {setChildren(std::mo/;"	f	class:CallExprASTNode	access:public	signature:(std::string name,std::vector<NodePtr> args)
CallExprASTNode	/home/dchanana/Projects/leaf/src/AST.h	/^class CallExprASTNode : public ExprASTNode$/;"	c	inherits:ExprASTNode
CallExprASTNode::CallExprASTNode	/home/dchanana/Projects/leaf/src/AST.h	/^		CallExprASTNode(std::string name, std::vector<NodePtr> args) : name(name) {setChildren(std::mo/;"	f	class:CallExprASTNode	access:public	signature:(std::string name,std::vector<NodePtr> args)
CallExprASTNode::name	/home/dchanana/Projects/leaf/src/AST.h	/^		std::string name;$/;"	m	class:CallExprASTNode	typeref:typename:std::string	access:private
ExprASTNode	/home/dchanana/Projects/leaf/src/AST.h	/^class ExprASTNode : public ASTNode$/;"	c	inherits:ASTNode
ExprASTNode::~ExprASTNode	/home/dchanana/Projects/leaf/src/AST.h	/^		virtual ~ExprASTNode() {}$/;"	f	class:ExprASTNode	access:public	signature:()
FunctionDefASTNode	/home/dchanana/Projects/leaf/src/AST.h	/^		FunctionDefASTNode(std::string name, std::vector<NodePtr> operations) : name(name) {setChildre/;"	f	class:FunctionDefASTNode	access:public	signature:(std::string name,std::vector<NodePtr> operations)
FunctionDefASTNode	/home/dchanana/Projects/leaf/src/AST.h	/^class FunctionDefASTNode : ASTNode$/;"	c	inherits:ASTNode
FunctionDefASTNode::FunctionDefASTNode	/home/dchanana/Projects/leaf/src/AST.h	/^		FunctionDefASTNode(std::string name, std::vector<NodePtr> operations) : name(name) {setChildre/;"	f	class:FunctionDefASTNode	access:public	signature:(std::string name,std::vector<NodePtr> operations)
FunctionDefASTNode::name	/home/dchanana/Projects/leaf/src/AST.h	/^		std::string name;$/;"	m	class:FunctionDefASTNode	typeref:typename:std::string	access:private
Lexer::constructAST	/home/dchanana/Projects/leaf/src/lexer.cpp	/^void Lexer::constructAST()$/;"	f	class:Lexer	typeref:typename:void	signature:()
Lexer::tokenize	/home/dchanana/Projects/leaf/src/constructAST.cpp	/^void Lexer::tokenize(std::string input[])$/;"	f	class:Lexer	typeref:typename:void	signature:(std::string input[])
Lexer::tokenize	/home/dchanana/Projects/leaf/src/lexer.cpp	/^void Lexer::tokenize(std::string input[])$/;"	f	class:Lexer	typeref:typename:void	signature:(std::string input[])
Lexer::tokenize	/home/dchanana/Projects/leaf/src/tokenizer.cpp	/^void Lexer::tokenize(std::string input[])$/;"	f	class:Lexer	typeref:typename:void	signature:(std::string input[])
NodePtr	/home/dchanana/Projects/leaf/src/AST.h	/^typedef std::unique_ptr<ASTNode> NodePtr;$/;"	t	typeref:typename:std::unique_ptr<ASTNode>
NumberExprASTNode	/home/dchanana/Projects/leaf/src/AST.h	/^		NumberExprASTNode(double value) : value(value) {}$/;"	f	class:NumberExprASTNode	access:public	signature:(double value)
NumberExprASTNode	/home/dchanana/Projects/leaf/src/AST.h	/^class NumberExprASTNode : public ExprASTNode$/;"	c	inherits:ExprASTNode
NumberExprASTNode::NumberExprASTNode	/home/dchanana/Projects/leaf/src/AST.h	/^		NumberExprASTNode(double value) : value(value) {}$/;"	f	class:NumberExprASTNode	access:public	signature:(double value)
NumberExprASTNode::value	/home/dchanana/Projects/leaf/src/AST.h	/^		double value;$/;"	m	class:NumberExprASTNode	typeref:typename:double	access:private
OperationExprASTNode	/home/dchanana/Projects/leaf/src/AST.h	/^		OperationExprASTNode(char op, std::unique_ptr<ExprASTNode> RHS, std::unique_ptr<ExprASTNode> L/;"	f	class:OperationExprASTNode	access:public	signature:(char op,std::unique_ptr<ExprASTNode> RHS,std::unique_ptr<ExprASTNode> LHS)
OperationExprASTNode	/home/dchanana/Projects/leaf/src/AST.h	/^class OperationExprASTNode : public ExprASTNode$/;"	c	inherits:ExprASTNode
OperationExprASTNode::OperationExprASTNode	/home/dchanana/Projects/leaf/src/AST.h	/^		OperationExprASTNode(char op, std::unique_ptr<ExprASTNode> RHS, std::unique_ptr<ExprASTNode> L/;"	f	class:OperationExprASTNode	access:public	signature:(char op,std::unique_ptr<ExprASTNode> RHS,std::unique_ptr<ExprASTNode> LHS)
OperationExprASTNode::op	/home/dchanana/Projects/leaf/src/AST.h	/^		char op;$/;"	m	class:OperationExprASTNode	typeref:typename:char	access:private
StringExprASTNode	/home/dchanana/Projects/leaf/src/AST.h	/^		StringExprASTNode(std::string value) : value(value) {};$/;"	f	class:StringExprASTNode	access:public	signature:(std::string value)
StringExprASTNode	/home/dchanana/Projects/leaf/src/AST.h	/^class StringExprASTNode : public ExprASTNode$/;"	c	inherits:ExprASTNode
StringExprASTNode::StringExprASTNode	/home/dchanana/Projects/leaf/src/AST.h	/^		StringExprASTNode(std::string value) : value(value) {};$/;"	f	class:StringExprASTNode	access:public	signature:(std::string value)
StringExprASTNode::value	/home/dchanana/Projects/leaf/src/AST.h	/^		std::string value;$/;"	m	class:StringExprASTNode	typeref:typename:std::string	access:private
Token	/home/dchanana/Projects/leaf/src/token.h	/^struct Token$/;"	s
Token::data	/home/dchanana/Projects/leaf/src/token.h	/^	std::string data;$/;"	m	struct:Token	typeref:typename:std::string	access:public
Token::type	/home/dchanana/Projects/leaf/src/token.h	/^	TokenType type;$/;"	m	struct:Token	typeref:typename:TokenType	access:public
TokenCloseExpressionBlock	/home/dchanana/Projects/leaf/src/token.h	/^	TokenCloseExpressionBlock,$/;"	e	enum:TokenType	access:public
TokenCloseParameterBlock	/home/dchanana/Projects/leaf/src/token.h	/^	TokenCloseParameterBlock,$/;"	e	enum:TokenType	access:public
TokenFunctionDefinition	/home/dchanana/Projects/leaf/src/token.h	/^	TokenFunctionDefinition,$/;"	e	enum:TokenType	access:public
TokenIdentifier	/home/dchanana/Projects/leaf/src/token.h	/^	TokenIdentifier,$/;"	e	enum:TokenType	access:public
TokenNumberLiteral	/home/dchanana/Projects/leaf/src/token.h	/^	TokenNumberLiteral,$/;"	e	enum:TokenType	access:public
TokenOpenExpressionBlock	/home/dchanana/Projects/leaf/src/token.h	/^	TokenOpenExpressionBlock,$/;"	e	enum:TokenType	access:public
TokenOpenParameterBlock	/home/dchanana/Projects/leaf/src/token.h	/^	TokenOpenParameterBlock,$/;"	e	enum:TokenType	access:public
TokenStringLiteral	/home/dchanana/Projects/leaf/src/token.h	/^	TokenStringLiteral,$/;"	e	enum:TokenType	access:public
TokenTerminateExpression	/home/dchanana/Projects/leaf/src/token.h	/^	TokenTerminateExpression,$/;"	e	enum:TokenType	access:public
TokenType	/home/dchanana/Projects/leaf/src/token.h	/^enum TokenType$/;"	g
TokenWhitespace	/home/dchanana/Projects/leaf/src/token.h	/^	TokenWhitespace,$/;"	e	enum:TokenType	access:public
VariableDefASTNode	/home/dchanana/Projects/leaf/src/AST.h	/^		VariableDefASTNode(std::string name, std::unique_ptr<ExprASTNode> value) : name(name) {childre/;"	f	class:VariableDefASTNode	access:public	signature:(std::string name,std::unique_ptr<ExprASTNode> value)
VariableDefASTNode	/home/dchanana/Projects/leaf/src/AST.h	/^class VariableDefASTNode : ASTNode$/;"	c	inherits:ASTNode
VariableDefASTNode::VariableDefASTNode	/home/dchanana/Projects/leaf/src/AST.h	/^		VariableDefASTNode(std::string name, std::unique_ptr<ExprASTNode> value) : name(name) {childre/;"	f	class:VariableDefASTNode	access:public	signature:(std::string name,std::unique_ptr<ExprASTNode> value)
VariableDefASTNode::name	/home/dchanana/Projects/leaf/src/AST.h	/^		std::string name;$/;"	m	class:VariableDefASTNode	typeref:typename:std::string	access:private
VariableExprASTNode	/home/dchanana/Projects/leaf/src/AST.h	/^		VariableExprASTNode(std::string name) : name(name) {}$/;"	f	class:VariableExprASTNode	access:public	signature:(std::string name)
VariableExprASTNode	/home/dchanana/Projects/leaf/src/AST.h	/^class VariableExprASTNode : public ExprASTNode$/;"	c	inherits:ExprASTNode
VariableExprASTNode::VariableExprASTNode	/home/dchanana/Projects/leaf/src/AST.h	/^		VariableExprASTNode(std::string name) : name(name) {}$/;"	f	class:VariableExprASTNode	access:public	signature:(std::string name)
VariableExprASTNode::name	/home/dchanana/Projects/leaf/src/AST.h	/^		std::string name;$/;"	m	class:VariableExprASTNode	typeref:typename:std::string	access:private
addChild	/home/dchanana/Projects/leaf/src/AST.h	/^		void addChild(NodePtr child) {children.push_back(std::move(child));}$/;"	f	class:ASTNode	typeref:typename:void	access:public	signature:(NodePtr child)
children	/home/dchanana/Projects/leaf/src/AST.h	/^		std::vector<NodePtr> children;$/;"	m	class:ASTNode	typeref:typename:std::vector<NodePtr>	access:protected
constructAST	/home/dchanana/Projects/leaf/src/lexer.cpp	/^void Lexer::constructAST()$/;"	f	class:Lexer	typeref:typename:void	signature:()
createToken	/home/dchanana/Projects/leaf/src/constructAST.cpp	/^Token createToken(TokenType type, std::string data)$/;"	f	typeref:typename:Token	signature:(TokenType type,std::string data)
createToken	/home/dchanana/Projects/leaf/src/lexer.cpp	/^Token createToken(TokenType type, std::string data)$/;"	f	typeref:typename:Token	signature:(TokenType type,std::string data)
createToken	/home/dchanana/Projects/leaf/src/token.h	/^Token createToken(TokenType, std::string);$/;"	p	typeref:typename:Token	signature:(TokenType,std::string)
createToken	/home/dchanana/Projects/leaf/src/tokenizer.cpp	/^Token createToken(TokenType type, std::string data)$/;"	f	typeref:typename:Token	signature:(TokenType type,std::string data)
data	/home/dchanana/Projects/leaf/src/token.h	/^	std::string data;$/;"	m	struct:Token	typeref:typename:std::string	access:public
getChildren	/home/dchanana/Projects/leaf/src/AST.h	/^		std::vector<NodePtr> getChildren() {return children;}$/;"	f	class:ASTNode	typeref:typename:std::vector<NodePtr>	access:public	signature:()
main	/home/dchanana/Projects/leaf/src/constructAST.cpp	/^int main(int argc, char *argv[])$/;"	f	typeref:typename:int	signature:(int argc,char * argv[])
main	/home/dchanana/Projects/leaf/src/lexer.cpp	/^int main(int argc, char *argv[])$/;"	f	typeref:typename:int	signature:(int argc,char * argv[])
main	/home/dchanana/Projects/leaf/src/tokenizer.cpp	/^int main(int argc, char *argv[])$/;"	f	typeref:typename:int	signature:(int argc,char * argv[])
name	/home/dchanana/Projects/leaf/src/AST.h	/^		std::string name;$/;"	m	class:CallExprASTNode	typeref:typename:std::string	access:private
name	/home/dchanana/Projects/leaf/src/AST.h	/^		std::string name;$/;"	m	class:FunctionDefASTNode	typeref:typename:std::string	access:private
name	/home/dchanana/Projects/leaf/src/AST.h	/^		std::string name;$/;"	m	class:VariableDefASTNode	typeref:typename:std::string	access:private
name	/home/dchanana/Projects/leaf/src/AST.h	/^		std::string name;$/;"	m	class:VariableExprASTNode	typeref:typename:std::string	access:private
op	/home/dchanana/Projects/leaf/src/AST.h	/^		char op;$/;"	m	class:OperationExprASTNode	typeref:typename:char	access:private
setChildren	/home/dchanana/Projects/leaf/src/AST.h	/^		void setChildren(std::vector<NodePtr> newChildren) {children = std::move(newChildren);}$/;"	f	class:ASTNode	typeref:typename:void	access:public	signature:(std::vector<NodePtr> newChildren)
tokenize	/home/dchanana/Projects/leaf/src/constructAST.cpp	/^void Lexer::tokenize(std::string input[])$/;"	f	class:Lexer	typeref:typename:void	signature:(std::string input[])
tokenize	/home/dchanana/Projects/leaf/src/lexer.cpp	/^void Lexer::tokenize(std::string input[])$/;"	f	class:Lexer	typeref:typename:void	signature:(std::string input[])
tokenize	/home/dchanana/Projects/leaf/src/tokenizer.cpp	/^void Lexer::tokenize(std::string input[])$/;"	f	class:Lexer	typeref:typename:void	signature:(std::string input[])
type	/home/dchanana/Projects/leaf/src/token.h	/^	TokenType type;$/;"	m	struct:Token	typeref:typename:TokenType	access:public
value	/home/dchanana/Projects/leaf/src/AST.h	/^		double value;$/;"	m	class:NumberExprASTNode	typeref:typename:double	access:private
value	/home/dchanana/Projects/leaf/src/AST.h	/^		std::string value;$/;"	m	class:StringExprASTNode	typeref:typename:std::string	access:private
~ASTNode	/home/dchanana/Projects/leaf/src/AST.h	/^		virtual ~ASTNode() {}$/;"	f	class:ASTNode	access:public	signature:()
~ExprASTNode	/home/dchanana/Projects/leaf/src/AST.h	/^		virtual ~ExprASTNode() {}$/;"	f	class:ExprASTNode	access:public	signature:()
